{
  "name": "LaraManager",
  "tagline": "Simple admin for Laravel applications",
  "body": "LaraManager is a basic database interface for Laravel applications. It was created as a simple way for us to provide clients with a method for updating basic content.\r\n\r\n## Support\r\nI'm the only one supporting this package at the moment and bugs might exist. Issues and pull requests are welcome. Currently, LaraManager is only available for Laravel 5.1. Please check the [releases page](https://github.com/philsquare/LaraManager/releases) for updates and change log.\r\n\r\n## Introduction\r\nLaraManager started out as a super simple admin panel for some of my basic Laravel website projects. However, I just couldn't stop tinkering and now it does a bit more. All I needed was a way for clients and myself to interact with basic customizable content resources such as events, posts and pages. It was never created to be a stand alone build-your-own-website CMS type product. For that, I would recommend PyroCMS. Instead, it provides some basic admin boiler plate such as auth, crud actions and panel.\r\n\r\n## Installation\r\nYou can install this package with Composer.\r\n\r\n```console\r\n$ composer require philsquare/laramanager\r\n```\r\n\r\nYou will need to add the following provider to ```config/app.php```\r\n\r\n```\r\n'Philsquare\\LaraManager\\Providers\\LaraManagerServiceProvider'\r\n```\r\n\r\nIn order to record exceptions the following will need to be added in the ```report()``` method in ```App/Exceptions/Handler.php```\r\n\r\n```\r\nnew Philsquare\\LaraManager\\Logging\\ExceptionLogging($e);\r\n```\r\n\r\nPublish the vendor assets and migrations\r\n\r\n```console\r\n$ php artisan vendor:publish\r\n```\r\n\r\nThen migrate the database\r\n```console\r\n$ php artisan migrate\r\n```\r\n\r\nYou can then login at /admin with admin@admin.com and \"password\" as the email and password respectively\r\n\r\n## Admin Panel\r\nThe admin panel consists of the side navigation, top bar and content area. The side navigation has a few topic areas with some default links. These topic areas are reporting, resources, uploads and system.\r\n### Dashboard\r\nThe dashboard is basically a blank canvas. It is used as the main landing page and can be customized per project.\r\n### Errors\r\nThis section lists any exceptions and groups them by count. The list can easily for sorted as to find 404s or any other exception.\r\n### Images\r\nThis image manager will contain all images uploaded to LaraManager. These images can then be accessed and used by resources and fields.\r\n### Settings\r\nNot much to see here yet. Basically just set your site name.\r\n### Resources\r\nCreate resources such as Posts, Locations and Events.\r\n### Objects\r\nObjects are generally used to provide design and content flexibility.\r\n### Feeds\r\nEasily create an RSS feed for any of your resources\r\n### Redirects\r\nCreate 301 or 302 redirects\r\n### Users\r\nBasic user management\r\n\r\n## Adding a Resource\r\nResources are items such as Events, Pages and Posts. They map up to your tables to help handle the CRUD actions. Since LaraManager is built as just an \"interface\" to your existing Laravel application, you will need to have these tables created and an Eloquent Model defined.\r\n\r\nYou will be adding fields to the resource that will match up to your columns. Make sure you add these field to your `$fillable` array.\r\n\r\n## Fields\r\nThere are 12 fields avaiable.\r\n* Checkbox\r\n* Date\r\n* Email\r\n* Image (integer)\r\n* Images\r\n* Password\r\n* Relational (integer)\r\n* Select\r\n* Slug\r\n* Text\r\n* Textarea\r\n* WYSIWYG\r\n\r\nThese fields should match up with your existing database fields appropriately. Make sure to make these fields fillable in your Laravel Model.\r\n\r\n## Objects\r\nObjects allow you to provide users with a way to \"build\" content onto a resourse. There are 4 default objects.\r\n* Text\r\n* WYSIWYG\r\n* Photo Gallery\r\n* Embed\r\n\r\nThe display for these objects can be overloaded by adding your own in the `view/vendor/laramanager/objects/` folder. For example, by creating `view/vendor/laramanager/objects/text/display.blade.php` LaraManager will use this file to display instead of the default.\r\n\r\n### Adding objects to resources\r\nIn order to be able to add objects to your resources, you will need add a trait to your Laravel Model.\r\n\r\n```php\r\nclass Event extends Model {\r\n\r\nuse Philsquare\\Laramanager\\Database\\Objectable;\r\n\r\n}\r\n```\r\n\r\n### Creating custom objects\r\nDocs to come...\r\n\r\n## Feeds\r\nLaraManager can create custom RSS feeds for your resources such as www.my-site.com/feed/events. Before adding the feed you will need to use the interface `Philsquare\\LaraManager\\Contracts\\RssFeedInterface` on your model and impliment the contract methods.\r\n\r\n## Customizing Admin Panel\r\nYou can use all your own routes, controllers, models, etc and just use LaraManager as an admin interface. Just load the layout in your blade file.\r\n\r\n```blade\r\n@extends('laramanager::default')\r\n```\r\n\r\n## License\r\nLaraManager is licensed under the [MIT License](http://opensource.org/licenses/MIT).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}