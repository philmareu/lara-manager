{
  "name": "Laramanager",
  "tagline": "Simple admin for Laravel applications",
  "body": "# LaraManager\r\n\r\nLaraManager is a basic database interface for Laravel applications. It was created as a simple way for us to provide clients with a method for updating basic content.Testing.\r\n\r\n## Support\r\nI'm the only one supporting this package at the moment and bugs might exist. Issues and pull requests are welcome.\r\n\r\n## Laravel 5.1\r\nCurrenting it is only available for Laravel 5.1.\r\n\r\n## Installation\r\nYou can install this package with Composer.\r\n\r\n```console\r\n$ composer require philsquare/laramanager\r\n```\r\n\r\nYou will need to add the following provider to ```config/app.php```\r\n\r\n```\r\n  'Philsquare\\LaraManager\\Providers\\LaraManagerServiceProvider'\r\n```\r\n\r\nPublish the vendor assets and migrations\r\n\r\n```console\r\n$ php artisan vendor:publish\r\n```\r\n\r\nThen migrate the database\r\n```console\r\n$ php artisan migrate\r\n```\r\n\r\nYou can then login at /admin with admin@admin.com and \"password\" as the email and password respectively\r\n\r\n## Content Resourses\r\nResources are tables that contain website content. For example, a website might have a table called \"events\". In order to update the event data, you will need to setup a resource and add fields that map to the table.\r\n\r\n### Fields\r\nThere are 12 fields avaiable.\r\n* Checkbox\r\n* Date\r\n* Email\r\n* Image (integer)\r\n* Images\r\n* Password\r\n* Relational (integer)\r\n* Select\r\n* Slug\r\n* Text\r\n* Textarea\r\n* WYSIWYG\r\n\r\nThese fields should match up with your existing database fields appropriately. Make sure to make these fields fillable in your Laravel Model.\r\n\r\n## Objects\r\nObjects allow you to provide users with a way to \"build\" content onto a resourse. There are 4 default objects.\r\n* Text\r\n* WYSIWYG\r\n* Photo Gallery\r\n* Embed\r\n\r\nThe display for these objects can be overloaded by adding your own in the `view/vendor/laramanager/objects/` folder. For example, by creating `view/vendor/laramanager/objects/text/display.blade.php` LaraManager will use this file to display instead of the default.\r\n\r\n### Adding objects to resources\r\nIn order to be able to add objects to your resources, you will need add a trait to your Laravel Model.\r\n\r\n```php\r\nclass Event extends Model {\r\n\r\nuse Philsquare\\Laramanager\\Database\\Objectable;\r\n\r\n}\r\n```\r\n\r\n### Creating custom objects\r\nDocs to come...\r\n\r\n## Feeds\r\nLaraManager can create custom RSS feeds for your resources such as www.my-site.com/feed/events. Before adding the feed you will need to use the interface `Philsquare\\LaraManager\\Contracts\\RssFeedInterface` on your model and impliment the contract methods.\r\n\r\n## Customizing Admin Panel\r\nYou can use all your own routes, controllers, models, etc and just use LaraManager as an admin interface. Just load the layout in your blade file.\r\n\r\n```blade\r\n@extends('laramanager::default')\r\n```\r\n\r\n## License\r\nLaraManager is licensed under the [MIT License](http://opensource.org/licenses/MIT).",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}